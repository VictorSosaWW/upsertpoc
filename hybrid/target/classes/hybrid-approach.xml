<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
    <db:mysql-config name="MySQL_Configuration" host="localhost" port="3306" user="root" password="root" database="pocbatch" doc:name="MySQL Configuration"/>
	<batch:job name="batchBuildingQuery" >
        <batch:threading-profile maxThreadsActive="25" poolExhaustedAction="WAIT"/>
        <batch:input>
        	<file:inbound-endpoint path="/home/victor/pocs/batch/toProcess/input" moveToDirectory="/home/victor/pocs/batch/toProcess/output" responseTimeout="10000" doc:name="File" pollingFrequency="60000">
                <file:filename-regex-filter pattern=".*csv" caseSensitive="true"/>
            </file:inbound-endpoint>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload as :iterator]]></dw:set-payload>
            </dw:transform-message>
        </batch:input>
        <batch:process-records>
            <batch:step name="Batch_Step_Build_Query">
                <set-payload value="INSERT INTO superbig VALUES ( '#[payload.Column_1_In_Row_0]', '#[payload.Column_2_In_Row_0]', '#[payload.Column_3_In_Row_0]', '#[payload.Column_4_In_Row_0]', '#[payload.Column_5_In_Row_0]', '#[payload.Column_6_In_Row_0]', '#[payload.Column_7_In_Row_0]', '#[payload.Column_8_In_Row_0]', '#[payload.Column_9_In_Row_0]', '#[payload.Column_10_In_Row_0]', '#[payload.Column_11_In_Row_0]', '#[payload.Column_12_In_Row_0]', '#[payload.Column_13_In_Row_0]', '#[payload.Column_14_In_Row_0]', '#[payload.Column_15_In_Row_0]', '#[payload.Column_16_In_Row_0]', '#[payload.Column_17_In_Row_0]', '#[payload.Column_18_In_Row_0]', '#[payload.Column_19_In_Row_0]', '#[payload.Column_20_In_Row_0]', '#[payload.Column_21_In_Row_0]', '#[payload.Column_22_In_Row_0]', '#[payload.Column_23_In_Row_0]', '#[payload.Column_24_In_Row_0]', '#[payload.Column_25_In_Row_0]', '#[payload.Column_26_In_Row_0]', '#[payload.Column_27_In_Row_0]', '#[payload.Column_28_In_Row_0]', '#[payload..Column_29_In_Row_0]', '#[payload.Column_30_In_Row_0]', '#[payload.Column_31_In_Row_0]', '#[payload.Column_32_In_Row_0]', '#[payload.Column_33_In_Row_0]', '#[payload.Column_34_In_Row_0]', '#[payload.Column_35_In_Row_0]', '#[payload.Column_36_In_Row_0]', '#[payload.Column_37_In_Row_0]', '#[payload.Column_38_In_Row_0]', '#[payload.Column_39_In_Row_0]', '#[payload.Column_40_In_Row_0]') ON DUPLICATE KEY UPDATE Column_2_In_Row_0 = VALUES(Column_2_In_Row_0), Column_3_In_Row_0 = VALUES(Column_3_In_Row_0), Column_4_In_Row_0 = VALUES(Column_4_In_Row_0), Column_5_In_Row_0 = VALUES(Column_5_In_Row_0), Column_6_In_Row_0 = VALUES(Column_6_In_Row_0), Column_7_In_Row_0 = VALUES(Column_7_In_Row_0), Column_8_In_Row_0 = VALUES(Column_8_In_Row_0), Column_9_In_Row_0 = VALUES(Column_9_In_Row_0), Column_10_In_Row_0 = VALUES(Column_10_In_Row_0), Column_11_In_Row_0 = VALUES(Column_11_In_Row_0), Column_12_In_Row_0 = VALUES(Column_12_In_Row_0), Column_13_In_Row_0 = VALUES(Column_13_In_Row_0), Column_14_In_Row_0 = VALUES(Column_14_In_Row_0), Column_15_In_Row_0 = VALUES(Column_15_In_Row_0), Column_16_In_Row_0 = VALUES(Column_16_In_Row_0), Column_17_In_Row_0 = VALUES(Column_17_In_Row_0), Column_18_In_Row_0 = VALUES(Column_18_In_Row_0), Column_19_In_Row_0 = VALUES(Column_19_In_Row_0), Column_20_In_Row_0 = VALUES(Column_20_In_Row_0), Column_21_In_Row_0 = VALUES(Column_21_In_Row_0), Column_22_In_Row_0 = VALUES(Column_22_In_Row_0), Column_23_In_Row_0 = VALUES(Column_23_In_Row_0), Column_24_In_Row_0 = VALUES(Column_24_In_Row_0), Column_25_In_Row_0 = VALUES(Column_25_In_Row_0), Column_26_In_Row_0 = VALUES(Column_26_In_Row_0), Column_27_In_Row_0 = VALUES(Column_27_In_Row_0), Column_28_In_Row_0 = VALUES(Column_28_In_Row_0), Column_29_In_Row_0 = VALUES(Column_29_In_Row_0), Column_30_In_Row_0 = VALUES(Column_30_In_Row_0), Column_31_In_Row_0 = VALUES(Column_31_In_Row_0), Column_32_In_Row_0 = VALUES(Column_32_In_Row_0), Column_33_In_Row_0 = VALUES(Column_33_In_Row_0), Column_34_In_Row_0 = VALUES(Column_34_In_Row_0), Column_35_In_Row_0 = VALUES(Column_35_In_Row_0), Column_36_In_Row_0 = VALUES(Column_36_In_Row_0), Column_37_In_Row_0 = VALUES(Column_37_In_Row_0), Column_38_In_Row_0 = VALUES(Column_38_In_Row_0), Column_39_In_Row_0 = VALUES(Column_39_In_Row_0), Column_40_In_Row_0 = VALUES(Column_40_In_Row_0);" doc:name="Set Payload"/> 
            </batch:step>
            <batch:step name="Batch_Step_Commit">
                <batch:commit size="200" doc:name="Batch Commit">
                    <scripting:component doc:name="Groovy">
                        <scripting:script engine="Groovy">
                            <scripting:text><![CDATA[builder = new java.lang.StringBuilder();
for (record in payload) {
	builder.append(record.toString());
	builder.append(System.getProperty("line.separator"))
}

payload = builder.toString();]]></scripting:text>
                        </scripting:script>
                    </scripting:component>
                    <db:bulk-execute config-ref="MySQL_Configuration" doc:name="Database"><![CDATA[#[payload]]]></db:bulk-execute>
                </batch:commit>
            </batch:step>
            <batch:step name="LogError_BatchBuildingQuery" accept-policy="ONLY_FAILURES">
                <logger level="ERROR" doc:name="Logger"/>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <logger message="********************************************** Complete! **********************************************" level="INFO" doc:name="Logger"/>
        </batch:on-complete>
    </batch:job>
</mule>
